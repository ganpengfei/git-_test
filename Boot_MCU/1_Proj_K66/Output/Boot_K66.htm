<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\Boot_K66.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\Boot_K66.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Thu Nov 29 13:58:53 2018
<BR><P>
<H3>Maximum Stack Usage =        684 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; CtlBoot_Handle &rArr; CtlBoot_JumpToUserApplication &rArr; DevDbg_PrintStringHDLC &rArr; DevDbg_TxPack &rArr; DrvDbg_TxPack &rArr; DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[44]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">NMI_Handler</a><BR>
 <LI><a href="#[49]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">SVC_Handler</a><BR>
 <LI><a href="#[4a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">DebugMon_Handler</a><BR>
 <LI><a href="#[4b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">PendSV_Handler</a><BR>
 <LI><a href="#[4c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">SysTick_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[74]">ADC0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[96]">ADC1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[47]">BusFault_Handler</a> from drvcfg.o(i.BusFault_Handler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[99]">CAN0_Bus_Off_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[2d]">CAN0_DriverIRQHandler</a> from fsl_flexcan.o(i.CAN0_DriverIRQHandler) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[9a]">CAN0_Error_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[98]">CAN0_ORed_Message_buffer_IRQHandler</a> from drvcan.o(i.CAN0_ORed_Message_buffer_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[9c]">CAN0_Rx_Warning_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[9b]">CAN0_Tx_Warning_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[9d]">CAN0_Wake_Up_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[ac]">CAN1_Bus_Off_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[35]">CAN1_DriverIRQHandler</a> from fsl_flexcan.o(i.CAN1_DriverIRQHandler) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[ad]">CAN1_Error_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[ab]">CAN1_ORed_Message_buffer_IRQHandler</a> from drvcan.o(i.CAN1_ORed_Message_buffer_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[af]">CAN1_Rx_Warning_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[ae]">CAN1_Tx_Warning_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[b0]">CAN1_Wake_Up_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[75]">CMP0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[76]">CMP1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[93]">CMP2_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[a9]">CMP3_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[7a]">CMT_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[85]">DAC0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[95]">DAC1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[a]">DMA0_DMA16_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[4d]">DMA0_DMA16_IRQHandler</a> from fsl_edma.o(i.DMA0_DMA16_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[14]">DMA10_DMA26_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[57]">DMA10_DMA26_IRQHandler</a> from fsl_edma.o(i.DMA10_DMA26_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[15]">DMA11_DMA27_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[58]">DMA11_DMA27_IRQHandler</a> from fsl_edma.o(i.DMA11_DMA27_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[16]">DMA12_DMA28_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[59]">DMA12_DMA28_IRQHandler</a> from fsl_edma.o(i.DMA12_DMA28_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[17]">DMA13_DMA29_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[5a]">DMA13_DMA29_IRQHandler</a> from fsl_edma.o(i.DMA13_DMA29_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[18]">DMA14_DMA30_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[5b]">DMA14_DMA30_IRQHandler</a> from fsl_edma.o(i.DMA14_DMA30_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[19]">DMA15_DMA31_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[5c]">DMA15_DMA31_IRQHandler</a> from fsl_edma.o(i.DMA15_DMA31_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[b]">DMA1_DMA17_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[4e]">DMA1_DMA17_IRQHandler</a> from fsl_edma.o(i.DMA1_DMA17_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[c]">DMA2_DMA18_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[4f]">DMA2_DMA18_IRQHandler</a> from fsl_edma.o(i.DMA2_DMA18_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[d]">DMA3_DMA19_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[50]">DMA3_DMA19_IRQHandler</a> from fsl_edma.o(i.DMA3_DMA19_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[e]">DMA4_DMA20_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[51]">DMA4_DMA20_IRQHandler</a> from fsl_edma.o(i.DMA4_DMA20_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[f]">DMA5_DMA21_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[52]">DMA5_DMA21_IRQHandler</a> from fsl_edma.o(i.DMA5_DMA21_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[10]">DMA6_DMA22_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[53]">DMA6_DMA22_IRQHandler</a> from fsl_edma.o(i.DMA6_DMA22_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[11]">DMA7_DMA23_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[54]">DMA7_DMA23_IRQHandler</a> from fsl_edma.o(i.DMA7_DMA23_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[12]">DMA8_DMA24_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[55]">DMA8_DMA24_IRQHandler</a> from fsl_edma.o(i.DMA8_DMA24_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[13]">DMA9_DMA25_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[56]">DMA9_DMA25_IRQHandler</a> from fsl_edma.o(i.DMA9_DMA25_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[1a]">DMA_Error_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[5d]">DMA_Error_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[4a]">DebugMon_Handler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[b1]">DefaultISR</a> from startup_mk66f18.o(.text) referenced 139 times from startup_mk66f18.o(RESET)
 <LI><a href="#[2f]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[9f]">ENET_1588_Timer_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[32]">ENET_Error_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[a2]">ENET_Error_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[31]">ENET_Receive_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[a1]">ENET_Receive_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[30]">ENET_Transmit_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[a0]">ENET_Transmit_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[5f]">FTFE_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[77]">FTM0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[78]">FTM1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[79]">FTM2_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[94]">FTM3_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[45]">HardFault_Handler</a> from drvcfg.o(.emb_text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[1b]">I2C0_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[65]">I2C0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[1c]">I2C1_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[66]">I2C1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[2c]">I2C2_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[97]">I2C2_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[34]">I2C3_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[a8]">I2C3_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[20]">I2S0_Rx_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[6a]">I2S0_Rx_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[1f]">I2S0_Tx_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[69]">I2S0_Tx_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[62]">LLWU_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[87]">LPTMR0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[33]">LPUART0_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[a3]">LPUART0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[61]">LVD_LVW_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[86]">MCG_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[5e]">MCM_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[46]">MemManage_Handler</a> from drvcfg.o(i.MemManage_Handler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[44]">NMI_Handler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[81]">PDB0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[7d]">PIT0_IRQHandler</a> from drvtimer.o(i.PIT0_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[7e]">PIT1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[7f]">PIT2_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[80]">PIT3_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[88]">PORTA_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[89]">PORTB_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[8a]">PORTC_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[8b]">PORTD_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[8c]">PORTE_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[4b]">PendSV_Handler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[64]">RNG_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[7b]">RTC_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[7c]">RTC_Seconds_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[60]">Read_Collision_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[6b]">Reserved46_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[84]">Reserved71_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[91]">Reserved84_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[92]">Reserved85_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[43]">Reset_Handler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[2e]">SDHC_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[9e]">SDHC_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[1d]">SPI0_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[67]">SPI0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[1e]">SPI1_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[68]">SPI1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[29]">SPI2_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[8e]">SPI2_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[49]">SVC_Handler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[8d]">SWI_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[4c]">SysTick_Handler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[8]">SystemInit</a> from system_mk66f18.o(i.SystemInit) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[a5]">TPM1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[a6]">TPM2_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[a4]">TSI0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[22]">UART0_ERR_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[6d]">UART0_ERR_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[21]">UART0_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[6c]">UART0_RX_TX_IRQHandler</a> from drvuart.o(i.UART0_RX_TX_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[38]">UART0_UserCallback</a> from drvuart.o(i.UART0_UserCallback) referenced from drvuart.o(i.DrvUart_TxBuff)
 <LI><a href="#[24]">UART1_ERR_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[6f]">UART1_ERR_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[23]">UART1_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[6e]">UART1_RX_TX_IRQHandler</a> from drvuart.o(i.UART1_RX_TX_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[39]">UART1_UserCallback</a> from drvuart.o(i.UART1_UserCallback) referenced from drvuart.o(i.DrvUart_TxBuff)
 <LI><a href="#[26]">UART2_ERR_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[71]">UART2_ERR_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[25]">UART2_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[70]">UART2_RX_TX_IRQHandler</a> from drvuart.o(i.UART2_RX_TX_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[3a]">UART2_UserCallback</a> from drvuart.o(i.UART2_UserCallback) referenced from drvuart.o(i.DrvUart_TxBuff)
 <LI><a href="#[28]">UART3_ERR_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[73]">UART3_ERR_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[27]">UART3_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART3_RX_TX_DriverIRQHandler) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[72]">UART3_RX_TX_IRQHandler</a> from drvuart.o(i.UART3_RX_TX_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[3b]">UART3_UserCallback</a> from drvuart.o(i.UART3_UserCallback) referenced from drvuart.o(i.DrvUart_TxBuff)
 <LI><a href="#[2b]">UART4_ERR_DriverIRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[90]">UART4_ERR_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[2a]">UART4_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART4_RX_TX_DriverIRQHandler) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[8f]">UART4_RX_TX_IRQHandler</a> from drvuart.o(i.UART4_RX_TX_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[3c]">UART4_UserCallback</a> from drvuart.o(i.UART4_UserCallback) referenced from drvuart.o(i.DrvUart_TxBuff)
 <LI><a href="#[3e]">UART_ReceiveEDMACallback</a> from fsl_uart_edma.o(i.UART_ReceiveEDMACallback) referenced from fsl_uart_edma.o(i.UART_TransferCreateHandleEDMA)
 <LI><a href="#[3d]">UART_SendEDMACallback</a> from fsl_uart_edma.o(i.UART_SendEDMACallback) referenced from fsl_uart_edma.o(i.UART_TransferCreateHandleEDMA)
 <LI><a href="#[82]">USB0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[83]">USBDCD_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[a7]">USBHSDCD_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[aa]">USBHS_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[48]">UsageFault_Handler</a> from drvcfg.o(i.UsageFault_Handler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[63]">WDOG_EWM_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[b2]">__main</a> from __main.o(!!!main) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[37]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[36]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[3f]">flash_cache_clear_command</a> from fsl_flash.o(i.flash_cache_clear_command) referenced from fsl_flash.o(i.copy_flash_cache_clear_command)
 <LI><a href="#[40]">flash_cache_clear_command_end</a> from fsl_flash.o(i.flash_cache_clear_command_end) referenced from fsl_flash.o(i.copy_flash_cache_clear_command)
 <LI><a href="#[41]">flash_run_command</a> from fsl_flash.o(i.flash_run_command) referenced from fsl_flash.o(i.copy_flash_run_command)
 <LI><a href="#[42]">flash_run_command_end</a> from fsl_flash.o(i.flash_run_command_end) referenced from fsl_flash.o(i.copy_flash_run_command)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b2]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b4]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b6]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1aa]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ab]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b7]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1ac]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[d5]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b8]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ba]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1ad]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[c1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[bc]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[be]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit5.o(.ARM.Collect$$libinit$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1c2]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1c3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1c4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1c5]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1c6]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1c7]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1c8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[b5]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1c9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1ca]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[c0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1cb]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[c2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; CtlBoot_Handle &rArr; CtlBoot_JumpToUserApplication &rArr; DevDbg_PrintStringHDLC &rArr; DevDbg_TxPack &rArr; DrvDbg_TxPack &rArr; DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1cc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[e2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1cd]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[45]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvcfg.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; HardFault_Handler_c &rArr; DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[1ce]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[44]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2S0_Tx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2S0_Rx_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>UART3_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>UART4_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>I2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>CAN0_Bus_Off_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>CAN0_Tx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>CAN0_Rx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>SDHC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>ENET_Transmit_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>ENET_Receive_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>ENET_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>I2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>CAN1_Bus_Off_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>CAN1_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>CAN1_Tx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>CAN1_Rx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>CAN1_Wake_Up_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>CMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Error_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>ENET_Error_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>ENET_Receive_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>ENET_Transmit_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>FTFE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>FTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>I2C3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>I2S0_Rx_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>I2S0_Tx_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>LPUART0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>PIT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>PIT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>Reserved84_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>Reserved85_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SDHC_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>SPI0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>SPI1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>SPI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>TPM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>TPM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART0_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>UART1_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>UART2_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>UART3_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>UART4_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>USBDCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>USBHSDCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>USBHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_CreatLine
</UL>

<P><STRONG><a name="[cc]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_FreeLine
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_InitConfig
</UL>

<P><STRONG><a name="[1cf]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_PrintVersion
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_c
</UL>

<P><STRONG><a name="[d0]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[d1]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[cf]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b9]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1d0]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[197]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_c
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_run_command
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_cache_clear_command
</UL>

<P><STRONG><a name="[d6]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1d1]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_InqPackData
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_PrintVersion
</UL>

<P><STRONG><a name="[d8]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1d5]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferCreateHandleEDMA
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_WriteBuff
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_Erase
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_c
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[ca]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1d8]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[db]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[bf]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[dd]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ce]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[36]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[df]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[bb]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[da]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[dc]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1da]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e1]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e0]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[c8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[e3]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[e4]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[47]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drvcfg.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN0_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_flexcan.o(i.CAN0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN0_DriverIRQHandler &rArr; FLEXCAN_TransferHandleIRQ &rArr; FLEXCAN_TransferAbortSend &rArr; FLEXCAN_SetTxMbConfig &rArr; FLEXCAN_IsMbOccupied
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>CAN0_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, drvcan.o(i.CAN0_ORed_Message_buffer_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = CAN0_ORed_Message_buffer_IRQHandler &rArr; DrvDbg_RxChar &rArr; DevAcu_SetDev &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxMb
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_RxChar
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_TxBuff
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMbStatusFlags
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearMbStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_flexcan.o(i.CAN1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN1_DriverIRQHandler &rArr; FLEXCAN_TransferHandleIRQ &rArr; FLEXCAN_TransferAbortSend &rArr; FLEXCAN_SetTxMbConfig &rArr; FLEXCAN_IsMbOccupied
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>CAN1_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, drvcan.o(i.CAN1_ORed_Message_buffer_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = CAN1_ORed_Message_buffer_IRQHandler &rArr; DrvDbg_RxChar &rArr; DevAcu_SetDev &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxMb
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_RxChar
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_TxBuff
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMbStatusFlags
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearMbStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>CLOCK_BootToPeeMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_BootToPeeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCfg_InitClock
</UL>

<P><STRONG><a name="[100]"></a>CLOCK_EnablePll0</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_EnablePll0))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
</UL>

<P><STRONG><a name="[ee]"></a>CLOCK_GetEr32kClkFreq</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, fsl_clock.o(i.CLOCK_GetEr32kClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetEr32kClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkDivFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[fc]"></a>CLOCK_GetExtPllFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetExtPllFreq))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>

<P><STRONG><a name="[f0]"></a>CLOCK_GetFixedFreqClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFixedFreqClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[f5]"></a>CLOCK_GetFllFreq</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>

<P><STRONG><a name="[f6]"></a>CLOCK_GetFreq</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkUndivFreq
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkDivFreq
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_InitConfig
</UL>

<P><STRONG><a name="[f9]"></a>CLOCK_GetInternalRefClkFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetInternalRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetInternalRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[ef]"></a>CLOCK_GetOsc0ErClkDivFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOsc0ErClkDivFreq))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
</UL>

<P><STRONG><a name="[f8]"></a>CLOCK_GetOsc0ErClkUndivFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOsc0ErClkUndivFreq))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[f2]"></a>CLOCK_GetOutClkFreq</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetOutClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtPllFreq
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
</UL>

<P><STRONG><a name="[fa]"></a>CLOCK_GetPll0Freq</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPll0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_GetPll0Freq &rArr; CLOCK_GetPll0RefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0RefFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>

<P><STRONG><a name="[f7]"></a>CLOCK_GetPllFllSelClkFreq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPllFllSelClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLOCK_GetPllFllSelClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[fe]"></a>CLOCK_InitOsc0</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_InitOsc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_InitOsc0
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscRangeFromFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCfg_InitClock
</UL>

<P><STRONG><a name="[ec]"></a>CLOCK_SetExternalRefClkConfig</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_SetExternalRefClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>

<P><STRONG><a name="[153]"></a>CLOCK_SetInternalRefClkConfig</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, fsl_clock.o(i.CLOCK_SetInternalRefClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_SetInternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCfg_InitClock
</UL>

<P><STRONG><a name="[ed]"></a>CLOCK_SetPbeMode</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, fsl_clock.o(i.CLOCK_SetPbeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_SetPbeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnablePll0
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>

<P><STRONG><a name="[154]"></a>CLOCK_SetSimConfig</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, fsl_clock.o(i.CLOCK_SetSimConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_SetSimConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCfg_InitClock
</UL>

<P><STRONG><a name="[101]"></a>CtlBoot_Handle</STRONG> (Thumb, 240 bytes, Stack size 416 bytes, ctlboot.o(i.CtlBoot_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = CtlBoot_Handle &rArr; CtlBoot_JumpToUserApplication &rArr; DevDbg_PrintStringHDLC &rArr; DevDbg_TxPack &rArr; DrvDbg_TxPack &rArr; DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUpData_CheckSum
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_WriteBuff
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_ReadBuff
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_Erase
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlBoot_JumpToUserApplication
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>CtlBoot_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ctlboot.o(i.CtlBoot_Init))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_Init
</UL>

<P><STRONG><a name="[106]"></a>CtlBoot_JumpToUserApplication</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ctlboot.o(i.CtlBoot_JumpToUserApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = CtlBoot_JumpToUserApplication &rArr; DevDbg_PrintStringHDLC &rArr; DevDbg_TxPack &rArr; DrvDbg_TxPack &rArr; DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_DriverStop
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_Delayms
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_PrintStringHDLC
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlBoot_Handle
</UL>

<P><STRONG><a name="[10e]"></a>CtlFpga_Delayus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ctlfpga.o(i.CtlFpga_Delayus))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlFpga_Updata
</UL>

<P><STRONG><a name="[10a]"></a>CtlFpga_Handle</STRONG> (Thumb, 208 bytes, Stack size 416 bytes, ctlfpga.o(i.CtlFpga_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = CtlFpga_Handle &rArr; DevDbg_PrintStringHDLC &rArr; DevDbg_TxPack &rArr; DrvDbg_TxPack &rArr; DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlFpga_Updata
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_ReadBuff
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_Delayms
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_PrintStringHDLC
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>CtlFpga_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, ctlfpga.o(i.CtlFpga_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CtlFpga_Init &rArr; DrvCfg_GpioInit &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCfg_GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_Init
</UL>

<P><STRONG><a name="[10b]"></a>CtlFpga_Updata</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, ctlfpga.o(i.CtlFpga_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CtlFpga_Updata
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlFpga_Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlFpga_Handle
</UL>

<P><STRONG><a name="[4d]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA0_DMA16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA0_DMA16_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA10_DMA26_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA10_DMA26_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA11_DMA27_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA11_DMA27_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA12_DMA28_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA12_DMA28_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA13_DMA29_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA13_DMA29_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA14_DMA30_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA14_DMA30_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA15_DMA31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA15_DMA31_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA1_DMA17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_DMA17_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA2_DMA18_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_DMA18_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA3_DMA19_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA3_DMA19_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA4_DMA20_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA4_DMA20_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA5_DMA21_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA5_DMA21_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA6_DMA22_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA6_DMA22_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA7_DMA23_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA7_DMA23_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA8_DMA24_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA8_DMA24_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA9_DMA25_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA9_DMA25_IRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>DMAMGR_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_dma_manager.o(i.DMAMGR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMAMGR_Init &rArr; EDMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetDefaultConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMUX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_TxBuff
</UL>

<P><STRONG><a name="[115]"></a>DMAMGR_RequestChannel</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, fsl_dma_manager.o(i.DMAMGR_RequestChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMAMGR_RequestChannel &rArr; EDMA_CreateHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_CreateHandle
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMUX_SetSource
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMUX_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_TxBuff
</UL>

<P><STRONG><a name="[112]"></a>DMAMUX_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_dmamux.o(i.DMAMUX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMAMUX_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMUX_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMGR_Init
</UL>

<P><STRONG><a name="[11c]"></a>DevAcu_DriverInit</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, devacu.o(i.DevAcu_DriverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = DevAcu_DriverInit &rArr; DevAcu_SetDev &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_SetDev
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_ReadBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_Init
</UL>

<P><STRONG><a name="[109]"></a>DevAcu_DriverStop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, devacu.o(i.DevAcu_DriverStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DevAcu_DriverStop &rArr; DrvTimer_Stop &rArr; PIT_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_Stop
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_Stop
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_FreeLine
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlBoot_JumpToUserApplication
</UL>

<P><STRONG><a name="[124]"></a>DevAcu_Handle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, devacu.o(i.DevAcu_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = DevAcu_Handle &rArr; DevDbg_Handle &rArr; DevDbg_RxHandle &rArr; DevDbg_UpData &rArr; DrvUpData_WriteBuff &rArr; DrvUpData_WritePack &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>DevAcu_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, devacu.o(i.DevAcu_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = DevAcu_Init &rArr; DevAcu_DriverInit &rArr; DevAcu_SetDev &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUpData_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCfg_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_DriverInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlFpga_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlBoot_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>DevAcu_InqDev</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devacu.o(i.DevAcu_InqDev))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_Buff
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_InqDevStatus
</UL>

<P><STRONG><a name="[138]"></a>DevAcu_InqVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, devacu.o(i.DevAcu_InqVersion))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_RxHandle
</UL>

<P><STRONG><a name="[12c]"></a>DevAcu_PrintVersion</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, devacu.o(i.DevAcu_PrintVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = DevAcu_PrintVersion &rArr; DevDbg_PrintStringHDLC &rArr; DevDbg_TxPack &rArr; DrvDbg_TxPack &rArr; DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_PrintStringHDLC
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>DevAcu_SetDev</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, devacu.o(i.DevAcu_SetDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = DevAcu_SetDev &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_WriteBuff
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_RxChar
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_DriverInit
</UL>

<P><STRONG><a name="[13c]"></a>DevDbg_ByteToInt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, devdbg.o(i.DevDbg_ByteToInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DevDbg_ByteToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_UpData
</UL>

<P><STRONG><a name="[125]"></a>DevDbg_Handle</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devdbg.o(i.DevDbg_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = DevDbg_Handle &rArr; DevDbg_RxHandle &rArr; DevDbg_UpData &rArr; DrvUpData_WriteBuff &rArr; DrvUpData_WritePack &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_Handle
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_TxHandle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_RxHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_Handle
</UL>

<P><STRONG><a name="[12b]"></a>DevDbg_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, devdbg.o(i.DevDbg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DevDbg_Init &rArr; DrvDbg_Init &rArr; DrvDbg_CreatLine &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_Init
</UL>

<P><STRONG><a name="[1a9]"></a>DevDbg_InqFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devdbg.o(i.DevDbg_InqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>DevDbg_IntToByte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, devdbg.o(i.DevDbg_IntToByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DevDbg_IntToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_UpData
</UL>

<P><STRONG><a name="[107]"></a>DevDbg_PrintStringHDLC</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, devdbg.o(i.DevDbg_PrintStringHDLC))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = DevDbg_PrintStringHDLC &rArr; DevDbg_TxPack &rArr; DrvDbg_TxPack &rArr; DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_TxPack
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_RxHandle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlBoot_JumpToUserApplication
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_PrintVersion
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlFpga_Handle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>DevDbg_RxHandle</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, devdbg.o(i.DevDbg_RxHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = DevDbg_RxHandle &rArr; DevDbg_UpData &rArr; DrvUpData_WriteBuff &rArr; DrvUpData_WritePack &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_InqTxQueueStatus
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_InqPackStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_InqPackData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_UpData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_TxPack
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_InqVersion
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_StopEvent
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_StartEvent
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_InqEventStatus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_PrintStringHDLC
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_Handle
</UL>

<P><STRONG><a name="[12f]"></a>DevDbg_TxHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, devdbg.o(i.DevDbg_TxHandle))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_Handle
</UL>

<P><STRONG><a name="[132]"></a>DevDbg_TxPack</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, devdbg.o(i.DevDbg_TxPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = DevDbg_TxPack &rArr; DrvDbg_TxPack &rArr; DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_TxPack
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_RxHandle
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_PrintStringHDLC
</UL>

<P><STRONG><a name="[139]"></a>DevDbg_UpData</STRONG> (Thumb, 486 bytes, Stack size 48 bytes, devdbg.o(i.DevDbg_UpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = DevDbg_UpData &rArr; DrvUpData_WriteBuff &rArr; DrvUpData_WritePack &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUpData_WriteBuff
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUpData_SetFlag
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUpData_SetCodeInf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUpData_Begin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_IntToByte
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_ByteToInt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUpData_CheckSum
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_StartEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_RxHandle
</UL>

<P><STRONG><a name="[11e]"></a>DrvCan_Init</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, drvcan.o(i.DrvCan_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DrvCan_Init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlEXCAN_SetRxIndividualMask
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTxMbConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxMbConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetDefaultConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinMux
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnableMbInterrupts
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Enable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_DriverInit
</UL>

<P><STRONG><a name="[15b]"></a>DrvCan_InqTxStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drvcan.o(i.DrvCan_InqTxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_InqDevStatus
</UL>

<P><STRONG><a name="[121]"></a>DrvCan_Stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drvcan.o(i.DrvCan_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvCan_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_DriverStop
</UL>

<P><STRONG><a name="[ea]"></a>DrvCan_TxBuff</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, drvcan.o(i.DrvCan_TxBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DrvCan_TxBuff &rArr; DrvCan_TxPack &rArr; FLEXCAN_WriteTxMb &rArr; FLEXCAN_IsMbOccupied
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_TxPack
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ORed_Message_buffer_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_Message_buffer_IRQHandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_Buff
</UL>

<P><STRONG><a name="[14d]"></a>DrvCan_TxPack</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, drvcan.o(i.DrvCan_TxPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DrvCan_TxPack &rArr; FLEXCAN_WriteTxMb &rArr; FLEXCAN_IsMbOccupied
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_WriteTxMb
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearMbStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_TxBuff
</UL>

<P><STRONG><a name="[10d]"></a>DrvCfg_GpioInit</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, drvcfg.o(i.DrvCfg_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DrvCfg_GpioInit &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlFpga_Init
</UL>

<P><STRONG><a name="[127]"></a>DrvCfg_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, drvcfg.o(i.DrvCfg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DrvCfg_Init &rArr; DrvCfg_InitClock &rArr; CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCfg_InitClock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_Init
</UL>

<P><STRONG><a name="[151]"></a>DrvCfg_InitClock</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, drvcfg.o(i.DrvCfg_InitClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DrvCfg_InitClock &rArr; CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetSimConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetInternalRefClkConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCfg_Init
</UL>

<P><STRONG><a name="[155]"></a>DrvDbg_Buff</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, drvdbg.o(i.DrvDbg_Buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_TxBuff
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_TxBuff
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_InqDev
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_TxPack
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_Handle
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_c
</UL>

<P><STRONG><a name="[158]"></a>DrvDbg_CreatLine</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drvdbg.o(i.DrvDbg_CreatLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DrvDbg_CreatLine &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_Init
</UL>

<P><STRONG><a name="[123]"></a>DrvDbg_FreeLine</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drvdbg.o(i.DrvDbg_FreeLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvDbg_FreeLine &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_DriverStop
</UL>

<P><STRONG><a name="[12e]"></a>DrvDbg_Handle</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, drvdbg.o(i.DrvDbg_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DrvDbg_Handle &rArr; DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_Buff
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_InqDevStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_Handle
</UL>

<P><STRONG><a name="[131]"></a>DrvDbg_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drvdbg.o(i.DrvDbg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DrvDbg_Init &rArr; DrvDbg_CreatLine &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_CreatLine
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_Init
</UL>

<P><STRONG><a name="[159]"></a>DrvDbg_InqDevStatus</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, drvdbg.o(i.DrvDbg_InqDevStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvDbg_InqDevStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_InqTxStatus
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_InqUartStatus
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_InqDev
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_Handle
</UL>

<P><STRONG><a name="[136]"></a>DrvDbg_InqPackData</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drvdbg.o(i.DrvDbg_InqPackData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvDbg_InqPackData
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_RxHandle
</UL>

<P><STRONG><a name="[135]"></a>DrvDbg_InqPackStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvdbg.o(i.DrvDbg_InqPackStatus))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_RxHandle
</UL>

<P><STRONG><a name="[13a]"></a>DrvDbg_InqTxQueueStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drvdbg.o(i.DrvDbg_InqTxQueueStatus))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_RxHandle
</UL>

<P><STRONG><a name="[e9]"></a>DrvDbg_RxChar</STRONG> (Thumb, 514 bytes, Stack size 16 bytes, drvdbg.o(i.DrvDbg_RxChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = DrvDbg_RxChar &rArr; DevAcu_SetDev &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_SetDev
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RX_TX_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_RX_TX_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_RX_TX_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_IRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ORed_Message_buffer_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_Message_buffer_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>DrvDbg_TxBuffQueue</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, drvdbg.o(i.DrvDbg_TxBuffQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvDbg_TxBuffQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_InqSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_TxPack
</UL>

<P><STRONG><a name="[13b]"></a>DrvDbg_TxPack</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, drvdbg.o(i.DrvDbg_TxPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = DrvDbg_TxPack &rArr; DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_Buff
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_TxBuffQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_TxPack
</UL>

<P><STRONG><a name="[103]"></a>DrvFlash_Erase</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, drvflash.o(i.DrvFlash_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DrvFlash_Erase &rArr; FLASH_VerifyErase &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetSecurityState
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUpData_SetFlag
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUpData_Begin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_SetDev
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlBoot_Handle
</UL>

<P><STRONG><a name="[102]"></a>DrvFlash_ReadBuff</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, drvflash.o(i.DrvFlash_ReadBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DrvFlash_ReadBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_DriverInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlFpga_Handle
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlBoot_Handle
</UL>

<P><STRONG><a name="[104]"></a>DrvFlash_WriteBuff</STRONG> (Thumb, 148 bytes, Stack size 96 bytes, drvflash.o(i.DrvFlash_WriteBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetSecurityState
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUpData_SetFlag
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_SetDev
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlBoot_Handle
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUpData_WritePack
</UL>

<P><STRONG><a name="[108]"></a>DrvTimer_Delayms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvtimer.o(i.DrvTimer_Delayms))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlBoot_JumpToUserApplication
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlFpga_Handle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>DrvTimer_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, drvtimer.o(i.DrvTimer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DrvTimer_Init &rArr; DrvTimer_InitConfig &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_InitConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_Init
</UL>

<P><STRONG><a name="[167]"></a>DrvTimer_InitConfig</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, drvtimer.o(i.DrvTimer_InitConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DrvTimer_InitConfig &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_Init
</UL>

<P><STRONG><a name="[133]"></a>DrvTimer_InqEventStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvtimer.o(i.DrvTimer_InqEventStatus))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_RxHandle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>DrvTimer_InqSysTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drvtimer.o(i.DrvTimer_InqSysTime))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_TxBuffQueue
</UL>

<P><STRONG><a name="[137]"></a>DrvTimer_StartEvent</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drvtimer.o(i.DrvTimer_StartEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvTimer_StartEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_UpData
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_RxHandle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>DrvTimer_Stop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, drvtimer.o(i.DrvTimer_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvTimer_Stop &rArr; PIT_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_DriverStop
</UL>

<P><STRONG><a name="[134]"></a>DrvTimer_StopEvent</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvtimer.o(i.DrvTimer_StopEvent))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_RxHandle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>DrvUart_Init</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, drvuart.o(i.DrvUart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DrvUart_Init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetDefaultConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInterrupts
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinMux
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_DriverInit
</UL>

<P><STRONG><a name="[15a]"></a>DrvUart_InqUartStatus</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, drvuart.o(i.DrvUart_InqUartStatus))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_InqDevStatus
</UL>

<P><STRONG><a name="[120]"></a>DrvUart_Stop</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, drvuart.o(i.DrvUart_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvUart_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_DriverStop
</UL>

<P><STRONG><a name="[157]"></a>DrvUart_TxBuff</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, drvuart.o(i.DrvUart_TxBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferCreateHandleEDMA
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendEDMA
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMGR_RequestChannel
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMGR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_Buff
</UL>

<P><STRONG><a name="[13e]"></a>DrvUpData_Begin</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drvupdate.o(i.DrvUpData_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = DrvUpData_Begin &rArr; DrvFlash_Erase &rArr; FLASH_VerifyErase &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_UpData
</UL>

<P><STRONG><a name="[105]"></a>DrvUpData_CheckSum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvupdate.o(i.DrvUpData_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvUpData_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_UpData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlBoot_Handle
</UL>

<P><STRONG><a name="[129]"></a>DrvUpData_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drvupdate.o(i.DrvUpData_Init))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_Init
</UL>

<P><STRONG><a name="[13d]"></a>DrvUpData_SetCodeInf</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drvupdate.o(i.DrvUpData_SetCodeInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvUpData_SetCodeInf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_UpData
</UL>

<P><STRONG><a name="[141]"></a>DrvUpData_SetFlag</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, drvupdate.o(i.DrvUpData_SetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = DrvUpData_SetFlag &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_WriteBuff
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_UpData
</UL>

<P><STRONG><a name="[13f]"></a>DrvUpData_WriteBuff</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, drvupdate.o(i.DrvUpData_WriteBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = DrvUpData_WriteBuff &rArr; DrvUpData_WritePack &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUpData_WritePack
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_UpData
</UL>

<P><STRONG><a name="[174]"></a>DrvUpData_WritePack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drvupdate.o(i.DrvUpData_WritePack))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = DrvUpData_WritePack &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_WriteBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUpData_WriteBuff
</UL>

<P><STRONG><a name="[1a6]"></a>EDMA_AbortTransfer</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_edma.o(i.EDMA_AbortTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferAbortSendEDMA
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferAbortReceiveEDMA
</UL>

<P><STRONG><a name="[11a]"></a>EDMA_CreateHandle</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, fsl_edma.o(i.EDMA_CreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EDMA_CreateHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMGR_RequestChannel
</UL>

<P><STRONG><a name="[10f]"></a>EDMA_GetChannelStatusFlags</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_edma.o(i.EDMA_GetChannelStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>EDMA_GetDefaultConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_edma.o(i.EDMA_GetDefaultConfig))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMGR_Init
</UL>

<P><STRONG><a name="[110]"></a>EDMA_HandleIRQ</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fsl_edma.o(i.EDMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EDMA_HandleIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>EDMA_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, fsl_edma.o(i.EDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EDMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMGR_Init
</UL>

<P><STRONG><a name="[1a2]"></a>EDMA_PrepareTransfer</STRONG> (Thumb, 252 bytes, Stack size 20 bytes, fsl_edma.o(i.EDMA_PrepareTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EDMA_PrepareTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendEDMA
</UL>

<P><STRONG><a name="[1a7]"></a>EDMA_SetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_edma.o(i.EDMA_SetCallback))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferCreateHandleEDMA
</UL>

<P><STRONG><a name="[176]"></a>EDMA_SetTransferConfig</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, fsl_edma.o(i.EDMA_SetTransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TcdSetTransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SubmitTransfer
</UL>

<P><STRONG><a name="[178]"></a>EDMA_StartTransfer</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_edma.o(i.EDMA_StartTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EDMA_StartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendEDMA
</UL>

<P><STRONG><a name="[17b]"></a>EDMA_SubmitTransfer</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, fsl_edma.o(i.EDMA_SubmitTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TcdSetTransferConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TcdReset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetTransferConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_InstallTCD
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendEDMA
</UL>

<P><STRONG><a name="[17c]"></a>EDMA_TcdReset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_edma.o(i.EDMA_TcdReset))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SubmitTransfer
</UL>

<P><STRONG><a name="[177]"></a>EDMA_TcdSetTransferConfig</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_edma.o(i.EDMA_TcdSetTransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EDMA_TcdSetTransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SubmitTransfer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetTransferConfig
</UL>

<P><STRONG><a name="[162]"></a>FLASH_Erase</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, fsl_flash.o(i.FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FLASH_Erase &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_user_key
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_Erase
</UL>

<P><STRONG><a name="[161]"></a>FLASH_GetSecurityState</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fsl_flash.o(i.FLASH_GetSecurityState))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_WriteBuff
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_Erase
</UL>

<P><STRONG><a name="[160]"></a>FLASH_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fsl_flash.o(i.FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FLASH_Init &rArr; FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_run_command
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_WriteBuff
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_Erase
</UL>

<P><STRONG><a name="[184]"></a>FLASH_PrepareExecuteInRamFunctions</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_flash.o(i.FLASH_PrepareExecuteInRamFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_run_command
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_run_command
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_cache_clear_command
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>

<P><STRONG><a name="[165]"></a>FLASH_Program</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, fsl_flash.o(i.FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FLASH_Program &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_WriteBuff
</UL>

<P><STRONG><a name="[163]"></a>FLASH_VerifyErase</STRONG> (Thumb, 164 bytes, Stack size 88 bytes, fsl_flash.o(i.FLASH_VerifyErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FLASH_VerifyErase &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_Erase
</UL>

<P><STRONG><a name="[166]"></a>FLASH_VerifyProgram</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, fsl_flash.o(i.FLASH_VerifyProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_WriteBuff
</UL>

<P><STRONG><a name="[142]"></a>FLEXCAN_GetDefaultConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_GetDefaultConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Init
</UL>

<P><STRONG><a name="[187]"></a>FLEXCAN_GetInstance</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[144]"></a>FLEXCAN_Init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, fsl_flexcan.o(i.FLEXCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FLEXCAN_Init &rArr; FLEXCAN_SetBaudRate &rArr; FLEXCAN_SetTimingConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetBaudRate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Reset
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Enable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Init
</UL>

<P><STRONG><a name="[e8]"></a>FLEXCAN_ReadRxMb</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, fsl_flexcan.o(i.FLEXCAN_ReadRxMb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXCAN_ReadRxMb &rArr; FLEXCAN_IsMbOccupied
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ORed_Message_buffer_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_Message_buffer_IRQHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[145]"></a>FLEXCAN_SetRxMbConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, fsl_flexcan.o(i.FLEXCAN_SetRxMbConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXCAN_SetRxMbConfig &rArr; FLEXCAN_IsMbOccupied
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Init
</UL>

<P><STRONG><a name="[18c]"></a>FLEXCAN_SetTimingConfig</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FLEXCAN_SetTimingConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_SetTimingConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ExitFrazeMode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnterFrazeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetBaudRate
</UL>

<P><STRONG><a name="[147]"></a>FLEXCAN_SetTxMbConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FLEXCAN_SetTxMbConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXCAN_SetTxMbConfig &rArr; FLEXCAN_IsMbOccupied
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
</UL>

<P><STRONG><a name="[18f]"></a>FLEXCAN_TransferAbortReceive</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FLEXCAN_TransferAbortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXCAN_TransferAbortReceive &rArr; FLEXCAN_IsMbOccupied
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_DisableMbInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[191]"></a>FLEXCAN_TransferAbortReceiveFifo</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FLEXCAN_TransferAbortReceiveFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_TransferAbortReceiveFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_DisableMbInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[192]"></a>FLEXCAN_TransferAbortSend</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FLEXCAN_TransferAbortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCAN_TransferAbortSend &rArr; FLEXCAN_SetTxMbConfig &rArr; FLEXCAN_IsMbOccupied
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTxMbConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_DisableMbInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[e5]"></a>FLEXCAN_TransferHandleIRQ</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, fsl_flexcan.o(i.FLEXCAN_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FLEXCAN_TransferHandleIRQ &rArr; FLEXCAN_TransferAbortSend &rArr; FLEXCAN_SetTxMbConfig &rArr; FLEXCAN_IsMbOccupied
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxMb
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbIntEnabled
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMbStatusFlags
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearMbStatusFlags
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlEXCAN_ReadRxFifo
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceiveFifo
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_DriverIRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_DriverIRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>FLEXCAN_WriteTxMb</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, fsl_flexcan.o(i.FLEXCAN_WriteTxMb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXCAN_WriteTxMb &rArr; FLEXCAN_IsMbOccupied
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_TxPack
</UL>

<P><STRONG><a name="[195]"></a>FlEXCAN_ReadRxFifo</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, fsl_flexcan.o(i.FlEXCAN_ReadRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlEXCAN_ReadRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[146]"></a>FlEXCAN_SetRxIndividualMask</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FlEXCAN_SetRxIndividualMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlEXCAN_SetRxIndividualMask
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ExitFrazeMode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnterFrazeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Init
</UL>

<P><STRONG><a name="[150]"></a>GPIO_PinInit</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCfg_GpioInit
</UL>

<P><STRONG><a name="[b3]"></a>HardFault_Handler_c</STRONG> (Thumb, 78 bytes, Stack size 128 bytes, drvcfg.o(i.HardFault_Handler_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler_c &rArr; DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_Buff
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[46]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drvcfg.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>PIT0_IRQHandler</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, drvtimer.o(i.PIT0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>PIT_Deinit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_pit.o(i.PIT_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_Stop
</UL>

<P><STRONG><a name="[168]"></a>PIT_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_pit.o(i.PIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_InitConfig
</UL>

<P><STRONG><a name="[8]"></a>SystemInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, system_mk66f18.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[199]"></a>UART0_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_uart.o(i.UART0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[21]"></a>UART0_RX_TX_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_RX_TX_DriverIRQHandler &rArr; UART0_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drvuart.o(i.UART0_RX_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = UART0_RX_TX_IRQHandler &rArr; DrvDbg_RxChar &rArr; DevAcu_SetDev &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlags
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadByte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_RxChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART0_UserCallback</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, drvuart.o(i.UART0_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART0_UserCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvuart.o(i.DrvUart_TxBuff)
</UL>
<P><STRONG><a name="[19c]"></a>UART1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_uart.o(i.UART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[23]"></a>UART1_RX_TX_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_RX_TX_DriverIRQHandler &rArr; UART1_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drvuart.o(i.UART1_RX_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = UART1_RX_TX_IRQHandler &rArr; DrvDbg_RxChar &rArr; DevAcu_SetDev &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlags
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadByte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_RxChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART1_UserCallback</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, drvuart.o(i.UART1_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART1_UserCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvuart.o(i.DrvUart_TxBuff)
</UL>
<P><STRONG><a name="[19d]"></a>UART2_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_uart.o(i.UART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[25]"></a>UART2_RX_TX_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_RX_TX_DriverIRQHandler &rArr; UART2_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drvuart.o(i.UART2_RX_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = UART2_RX_TX_IRQHandler &rArr; DrvDbg_RxChar &rArr; DevAcu_SetDev &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlags
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadByte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_RxChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART2_UserCallback</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, drvuart.o(i.UART2_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART2_UserCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvuart.o(i.DrvUart_TxBuff)
</UL>
<P><STRONG><a name="[19e]"></a>UART3_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_uart.o(i.UART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[27]"></a>UART3_RX_TX_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_uart.o(i.UART3_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART3_RX_TX_DriverIRQHandler &rArr; UART3_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>UART3_RX_TX_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drvuart.o(i.UART3_RX_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = UART3_RX_TX_IRQHandler &rArr; DrvDbg_RxChar &rArr; DevAcu_SetDev &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlags
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadByte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_RxChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART3_UserCallback</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, drvuart.o(i.UART3_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART3_UserCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvuart.o(i.DrvUart_TxBuff)
</UL>
<P><STRONG><a name="[19f]"></a>UART4_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_uart.o(i.UART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[2a]"></a>UART4_RX_TX_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_uart.o(i.UART4_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_RX_TX_DriverIRQHandler &rArr; UART4_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>UART4_RX_TX_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drvuart.o(i.UART4_RX_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = UART4_RX_TX_IRQHandler &rArr; DrvDbg_RxChar &rArr; DevAcu_SetDev &rArr; DrvFlash_WriteBuff &rArr; FLASH_VerifyProgram &rArr; flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlags
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadByte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDbg_RxChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UART4_UserCallback</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, drvuart.o(i.UART4_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART4_UserCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvuart.o(i.DrvUart_TxBuff)
</UL>
<P><STRONG><a name="[16e]"></a>UART_EnableInterrupts</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_uart.o(i.UART_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_Init
</UL>

<P><STRONG><a name="[16b]"></a>UART_GetDefaultConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_uart.o(i.UART_GetDefaultConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_Init
</UL>

<P><STRONG><a name="[1a0]"></a>UART_GetInstance</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_uart.o(i.UART_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferCreateHandleEDMA
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[19a]"></a>UART_GetStatusFlags</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_uart.o(i.UART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RX_TX_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_RX_TX_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_RX_TX_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>UART_Init</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, fsl_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_Init
</UL>

<P><STRONG><a name="[173]"></a>UART_SendEDMA</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, fsl_uart_edma.o(i.UART_SendEDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SubmitTransfer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_StartTransfer
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_PrepareTransfer
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableTxDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_TxBuff
</UL>

<P><STRONG><a name="[1a1]"></a>UART_TransferAbortReceiveEDMA</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fsl_uart_edma.o(i.UART_TransferAbortReceiveEDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TransferAbortReceiveEDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_AbortTransfer
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableRxDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveEDMACallback
</UL>

<P><STRONG><a name="[1a4]"></a>UART_TransferAbortSendEDMA</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fsl_uart_edma.o(i.UART_TransferAbortSendEDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TransferAbortSendEDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_AbortTransfer
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableTxDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendEDMACallback
</UL>

<P><STRONG><a name="[172]"></a>UART_TransferCreateHandleEDMA</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, fsl_uart_edma.o(i.UART_TransferCreateHandleEDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_TransferCreateHandleEDMA &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInstance
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_TxBuff
</UL>

<P><STRONG><a name="[48]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drvcfg.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[182]"></a>flash_cache_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_flash.o(i.flash_cache_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[3f]"></a>flash_cache_clear_command</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_cache_clear_command))
<BR>[Address Reference Count : 1]<UL><LI> fsl_flash.o(i.copy_flash_cache_clear_command)
</UL>
<P><STRONG><a name="[40]"></a>flash_cache_clear_command_end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_cache_clear_command_end))
<BR>[Address Reference Count : 1]<UL><LI> fsl_flash.o(i.copy_flash_cache_clear_command)
</UL>
<P><STRONG><a name="[41]"></a>flash_run_command</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_run_command))
<BR>[Address Reference Count : 1]<UL><LI> fsl_flash.o(i.copy_flash_run_command)
</UL>
<P><STRONG><a name="[42]"></a>flash_run_command_end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_run_command_end))
<BR>[Address Reference Count : 1]<UL><LI> fsl_flash.o(i.copy_flash_run_command)
</UL>
<P><STRONG><a name="[c3]"></a>main</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = main &rArr; CtlBoot_Handle &rArr; CtlBoot_JumpToUserApplication &rArr; DevDbg_PrintStringHDLC &rArr; DevDbg_TxPack &rArr; DrvDbg_TxPack &rArr; DrvDbg_Buff &rArr; DrvUart_TxBuff &rArr; UART_SendEDMA &rArr; EDMA_SubmitTransfer &rArr; EDMA_SetTransferConfig &rArr; EDMA_TcdSetTransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_StopEvent
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_StartEvent
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_InqEventStatus
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_Delayms
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_PrintStringHDLC
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDbg_InqFlag
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_PrintVersion
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevAcu_Handle
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlFpga_Handle
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlBoot_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bd]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1dd]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1de]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14c]"></a>DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drvcan.o(i.DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Stop
</UL>

<P><STRONG><a name="[149]"></a>EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvcan.o(i.EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Init
</UL>

<P><STRONG><a name="[e7]"></a>FLEXCAN_ClearMbStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drvcan.o(i.FLEXCAN_ClearMbStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_TxPack
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ORed_Message_buffer_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_Message_buffer_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>FLEXCAN_Enable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, drvcan.o(i.FLEXCAN_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Init
</UL>

<P><STRONG><a name="[148]"></a>FLEXCAN_EnableMbInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drvcan.o(i.FLEXCAN_EnableMbInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Init
</UL>

<P><STRONG><a name="[e6]"></a>FLEXCAN_GetMbStatusFlags</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drvcan.o(i.FLEXCAN_GetMbStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ORed_Message_buffer_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_Message_buffer_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drvcan.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Init
</UL>

<P><STRONG><a name="[143]"></a>PORT_SetPinMux</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvcan.o(i.PORT_SetPinMux))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCan_Init
</UL>

<P><STRONG><a name="[171]"></a>DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drvuart.o(i.DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_Stop
</UL>

<P><STRONG><a name="[170]"></a>EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvuart.o(i.EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_Init
</UL>

<P><STRONG><a name="[16f]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drvuart.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_Init
</UL>

<P><STRONG><a name="[16c]"></a>PORT_SetPinMux</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvuart.o(i.PORT_SetPinMux))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUart_Init
</UL>

<P><STRONG><a name="[19b]"></a>UART_ReadByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drvuart.o(i.UART_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RX_TX_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_RX_TX_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_RX_TX_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>DisableGlobalIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvflash.o(i.DisableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_WriteBuff
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_Erase
</UL>

<P><STRONG><a name="[164]"></a>EnableGlobalIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drvflash.o(i.EnableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_WriteBuff
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvFlash_Erase
</UL>

<P><STRONG><a name="[152]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvcfg.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCfg_Init
</UL>

<P><STRONG><a name="[14f]"></a>PORT_SetPinMux</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvcfg.o(i.PORT_SetPinMux))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCfg_GpioInit
</UL>

<P><STRONG><a name="[f3]"></a>CLOCK_GetFllExtRefClkFreq</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fsl_clock.o(i.CLOCK_GetFllExtRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>

<P><STRONG><a name="[f1]"></a>CLOCK_GetFllRefClkFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFllRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
</UL>

<P><STRONG><a name="[fb]"></a>CLOCK_GetInternalRefClkSelectFreq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetInternalRefClkSelectFreq))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
</UL>

<P><STRONG><a name="[f4]"></a>CLOCK_GetMcgExtClkFreq</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetMcgExtClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0RefFreq
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
</UL>

<P><STRONG><a name="[ff]"></a>CLOCK_GetOscRangeFromFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscRangeFromFreq))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
</UL>

<P><STRONG><a name="[fd]"></a>CLOCK_GetPll0RefFreq</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPll0RefFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetPll0RefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
</UL>

<P><STRONG><a name="[11b]"></a>DMAMUX_GetInstance</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_dmamux.o(i.DMAMUX_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMUX_Init
</UL>

<P><STRONG><a name="[179]"></a>DisableGlobalIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_edma.o(i.DisableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SubmitTransfer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_StartTransfer
</UL>

<P><STRONG><a name="[175]"></a>EDMA_GetInstance</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_edma.o(i.EDMA_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_CreateHandle
</UL>

<P><STRONG><a name="[17d]"></a>EDMA_InstallTCD</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, fsl_edma.o(i.EDMA_InstallTCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EDMA_InstallTCD
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SubmitTransfer
</UL>

<P><STRONG><a name="[17a]"></a>EnableGlobalIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_edma.o(i.EnableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SubmitTransfer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_StartTransfer
</UL>

<P><STRONG><a name="[186]"></a>copy_flash_cache_clear_command</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, fsl_flash.o(i.copy_flash_cache_clear_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copy_flash_cache_clear_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
</UL>

<P><STRONG><a name="[185]"></a>copy_flash_run_command</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, fsl_flash.o(i.copy_flash_run_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copy_flash_run_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
</UL>

<P><STRONG><a name="[183]"></a>flash_check_execute_in_ram_function_info</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_check_execute_in_ram_function_info))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
</UL>

<P><STRONG><a name="[17f]"></a>flash_check_range</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, fsl_flash.o(i.flash_check_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[180]"></a>flash_check_user_key</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_check_user_key))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[181]"></a>flash_command_sequence</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fsl_flash.o(i.flash_command_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_command_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[17e]"></a>flash_get_matched_operation_info</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_flash.o(i.flash_get_matched_operation_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_get_matched_operation_info &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyProgram
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_VerifyErase
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[196]"></a>FLEXCAN_ClearMbStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_ClearMbStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[190]"></a>FLEXCAN_DisableMbInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_DisableMbInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceiveFifo
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceive
</UL>

<P><STRONG><a name="[188]"></a>FLEXCAN_Enable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[18d]"></a>FLEXCAN_EnterFrazeMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_EnterFrazeMode))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlEXCAN_SetRxIndividualMask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTimingConfig
</UL>

<P><STRONG><a name="[18e]"></a>FLEXCAN_ExitFrazeMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_ExitFrazeMode))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlEXCAN_SetRxIndividualMask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTimingConfig
</UL>

<P><STRONG><a name="[193]"></a>FLEXCAN_GetMbStatusFlags</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_GetMbStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[194]"></a>FLEXCAN_IsMbIntEnabled</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_IsMbIntEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[18b]"></a>FLEXCAN_IsMbOccupied</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_flexcan.o(i.FLEXCAN_IsMbOccupied))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCAN_IsMbOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_WriteTxMb
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTxMbConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxMbConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxMb
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceive
</UL>

<P><STRONG><a name="[189]"></a>FLEXCAN_Reset</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[18a]"></a>FLEXCAN_SetBaudRate</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, fsl_flexcan.o(i.FLEXCAN_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLEXCAN_SetBaudRate &rArr; FLEXCAN_SetTimingConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTimingConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[1a5]"></a>UART_EnableRxDMA</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_uart_edma.o(i.UART_EnableRxDMA))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferAbortReceiveEDMA
</UL>

<P><STRONG><a name="[1a3]"></a>UART_EnableTxDMA</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_uart_edma.o(i.UART_EnableTxDMA))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendEDMA
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferAbortSendEDMA
</UL>

<P><STRONG><a name="[3e]"></a>UART_ReceiveEDMACallback</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fsl_uart_edma.o(i.UART_ReceiveEDMACallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_ReceiveEDMACallback &rArr; UART_TransferAbortReceiveEDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferAbortReceiveEDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_uart_edma.o(i.UART_TransferCreateHandleEDMA)
</UL>
<P><STRONG><a name="[3d]"></a>UART_SendEDMACallback</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fsl_uart_edma.o(i.UART_SendEDMACallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_SendEDMACallback &rArr; UART_TransferAbortSendEDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferAbortSendEDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_uart_edma.o(i.UART_TransferCreateHandleEDMA)
</UL>
<P><STRONG><a name="[119]"></a>DMAMUX_EnableChannel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_dma_manager.o(i.DMAMUX_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMGR_RequestChannel
</UL>

<P><STRONG><a name="[118]"></a>DMAMUX_SetSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_dma_manager.o(i.DMAMUX_SetSource))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMGR_RequestChannel
</UL>

<P><STRONG><a name="[116]"></a>DisableGlobalIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_dma_manager.o(i.DisableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMGR_RequestChannel
</UL>

<P><STRONG><a name="[117]"></a>EnableGlobalIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_dma_manager.o(i.EnableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMGR_RequestChannel
</UL>

<P><STRONG><a name="[198]"></a>PIT_GetInstance</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_pit.o(i.PIT_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Deinit
</UL>

<P><STRONG><a name="[37]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
